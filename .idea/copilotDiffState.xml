<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/../README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../README.md" />
              <option name="updatedContent" value="# UsuhiWeb&#10;&#10;Веб-приложение для заказа еды (суши, роллы, напитки и др.) на Django.&#10;&#10;## Описание&#10;Пользователь может просматривать меню, добавлять товары в корзину, оформлять заказы, регистрироваться и редактировать профиль.&#10;&#10;## Основные возможности&#10;- Просмотр каталога блюд&#10;- Добавление товаров в корзину&#10;- Оформление заказа&#10;- Регистрация и авторизация&#10;- Личный кабинет пользователя&#10;- Админ-панель для управления блюдами&#10;&#10;## Установка&#10;1. Клонируйте репозиторий:&#10;   ```bash&#10;   git clone https://github.com/ваш-аккаунт/UsuhiWeb.git&#10;   ```&#10;2. Перейдите в папку проекта:&#10;   ```bash&#10;   cd UsuhiWeb&#10;   ```&#10;3. Установите зависимости:&#10;   ```bash&#10;   pip install -r requirements.txt&#10;   ```&#10;4. Примените миграции:&#10;   ```bash&#10;   python manage.py migrate&#10;   ```&#10;5. Запустите сервер:&#10;   ```bash&#10;   python manage.py runserver&#10;   ```&#10;&#10;## Используемые библиотеки&#10;- Django&#10;- Pillow (для работы с изображениями)&#10;&#10;## Пример requirements.txt&#10;```&#10;Django&gt;=4.0&#10;Pillow&#10;```&#10;&#10;## Структура проекта&#10;- usuhi_app/ — основное приложение&#10;- templates/ — шаблоны страниц&#10;- static/ — статические файлы (CSS, JS, изображения)&#10;&#10;## Лицензия&#10;MIT&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../README_new.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../README_new.md" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/usuhi_app/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/usuhi_app/views.py" />
              <option name="originalContent" value="from django.shortcuts import render, get_object_or_404, redirect&#10;from .models import *&#10;from .forms import *&#10;from django.contrib.auth.forms import AuthenticationForm&#10;from django.contrib.auth import authenticate, login, logout, update_session_auth_hash&#10;from django.contrib.auth.decorators import login_required&#10;from django.views.decorators.http import require_POST&#10;from django.core.exceptions import ObjectDoesNotExist&#10;from django.http import JsonResponse&#10;from django.views.decorators.csrf import csrf_exempt&#10;import json&#10;from django.db import transaction&#10;from django.contrib.auth.views import PasswordChangeView&#10;from django.urls import reverse_lazy&#10;from django.shortcuts import render, get_object_or_404, redirect&#10;from django.contrib.auth.decorators import login_required&#10;from django.http import JsonResponse&#10;from .models import Food, Cart, CartItem, Profile&#10;from django.views.decorators.http import require_POST&#10;from django.views.decorators.csrf import csrf_exempt&#10;import json&#10;import logging&#10;from decimal import Decimal&#10;logger = logging.getLogger(__name__)&#10;&#10;def food_page(request):&#10;    foods = Food.objects.all()&#10;    cart_items = {}&#10;&#10;    if request.user.is_authenticated:&#10;        cart, _ = Cart.objects.get_or_create(user=request.user)&#10;        cart_items = {item.food.id: item.quantity for item in cart.items.all()}&#10;&#10;    FOOD_TYPES = Food.FOOD_TYPES&#10;    context = {&#10;        'foods': foods,&#10;        'FOOD_TYPES': FOOD_TYPES,&#10;        'cart_items': cart_items&#10;    }&#10;    return render(request, &quot;foods_page.html&quot;, context)&#10;&#10;def about_page(request):&#10;    return render(request, 'about_page.html')&#10;&#10;def signup_page(request):&#10;    if request.method == 'POST':&#10;        form = NewsUserForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            return redirect(&quot;login_page&quot;)&#10;    else:&#10;        form = NewsUserForm()&#10;    context = {'form': form}&#10;    return render(request, './signup.html', context)&#10;&#10;def login_page(request):&#10;    if request.method == 'POST':&#10;        form = AuthenticationForm(request, data=request.POST)&#10;        if form.is_valid():&#10;            username = form.cleaned_data.get('username')&#10;            password = form.cleaned_data.get('password')&#10;            user = authenticate(username=username, password=password)&#10;            if user is not None:&#10;                login(request, user)&#10;                return redirect(&quot;food_page&quot;)&#10;    else:&#10;        form = AuthenticationForm()&#10;    context = {'form': form}&#10;    return render(request, './login.html', context)&#10;&#10;@login_required&#10;def view_cart(request):&#10;    cart, _ = Cart.objects.get_or_create(user=request.user)&#10;    cart_items = {item.food.id: item.quantity for item in cart.items.all()}&#10;    total_price = sum(item.food.price * item.quantity for item in cart.items.all())&#10;&#10;    context = {&#10;        'foods': Food.objects.all(),&#10;        'cart_items': cart_items,&#10;        'total_price': total_price&#10;    }&#10;    return render(request, &quot;cart.html&quot;, context)&#10;&#10;@login_required&#10;def view_profile(request):&#10;    try:&#10;        profile = Profile.objects.get(user=request.user)&#10;    except Profile.DoesNotExist:&#10;        profile = Profile.objects.create(user=request.user)&#10;&#10;    if request.method == 'POST':&#10;        user_form = UserUpdateForm(request.POST, instance=request.user)&#10;        profile_form = ProfileForm(request.POST, request.FILES, instance=profile)&#10;&#10;        if user_form.is_valid() and profile_form.is_valid():&#10;            user_form.save()&#10;            profile_form.save()&#10;            return redirect('view_profile')&#10;    else:&#10;        user_form = UserUpdateForm(instance=request.user)&#10;        profile_form = ProfileForm(instance=profile)&#10;&#10;    context = {&#10;        'profile': profile,&#10;        'user_form': user_form,&#10;        'profile_form': profile_form,&#10;    }&#10;    return render(request, 'profile.html', context)&#10;&#10;class CustomPasswordChangeView(PasswordChangeView):&#10;    form_class = CustomPasswordChangeForm&#10;    success_url = reverse_lazy('view_profile')&#10;    template_name = 'change_password.html'&#10;&#10;    def form_valid(self, form):&#10;        user = form.save()&#10;        update_session_auth_hash(self.request, user)&#10;        return super().form_valid(form)&#10;&#10;@login_required&#10;def edit_profile(request):&#10;    profile = get_object_or_404(Profile, user=request.user)&#10;    if request.method == 'POST':&#10;        user_form = UserUpdateForm(request.POST, instance=request.user)&#10;        profile_form = ProfileForm(request.POST, request.FILES, instance=profile)&#10;        password_form = CustomPasswordChangeForm(user=request.user, data=request.POST)&#10;&#10;        if user_form.is_valid() and profile_form.is_valid():&#10;            user_form.save()&#10;            profile_form.save()&#10;            return redirect('view_profile')&#10;&#10;        if password_form.is_valid():&#10;            user = password_form.save()&#10;            update_session_auth_hash(request, user)&#10;            return redirect('view_profile')&#10;    else:&#10;        user_form = UserUpdateForm(instance=request.user)&#10;        profile_form = ProfileForm(instance=profile)&#10;        password_form = CustomPasswordChangeForm(user=request.user)&#10;&#10;    context = {&#10;        'user_form': user_form,&#10;        'profile_form': profile_form,&#10;        'password_form': password_form,&#10;    }&#10;    return render(request, 'edit_profile.html', context)&#10;&#10;def logout_request(request):&#10;    logout(request)&#10;    return redirect(&quot;food_page&quot;)&#10;&#10;def add_food_page(request):&#10;    if request.method == 'POST':&#10;        form = AddFoodForm(request.POST)&#10;        if form.is_valid():&#10;            form.save()&#10;            return redirect('all_food_page')&#10;    else:&#10;        form = AddFoodForm()&#10;    context = {'form': form}&#10;    return render(request, './add_food_page.html', context)&#10;&#10;def food_detail_page(request, pk):&#10;    food = get_object_or_404(Food, pk=pk)&#10;    context = {&#10;        'food': food,&#10;    }&#10;    return render(request, './food_detail_page.html', context)&#10;&#10;def edit_food_page(request, pk):&#10;    food = get_object_or_404(Food, pk=pk)&#10;    form = AddFoodForm(request.POST or None, request.FILES or None, instance=food)&#10;    if request.method == 'POST':&#10;        if form.is_valid():&#10;            form.save()&#10;            return redirect('food_detail_page', pk=food.pk)&#10;    context = {&#10;        'food': food,&#10;        'form': form&#10;    }&#10;    return render(request, './edit_food_page.html', context)&#10;&#10;def delete_food_page(request, pk):&#10;    food = get_object_or_404(Food, pk=pk)&#10;    if request.method == 'POST':&#10;        food.delete()&#10;        return redirect('all_food_page')&#10;    context = {&#10;        'food': food&#10;    }&#10;    return render(request, './delete_food_page.html', context)&#10;&#10;def all_food_page(request):&#10;    foods = Food.objects.all()&#10;    FOOD_TYPES = Food.FOOD_TYPES&#10;    context = {'foods': foods, 'FOOD_TYPES': FOOD_TYPES}&#10;    return render(request, 'all_foods.html', context)&#10;&#10;@login_required&#10;@require_POST&#10;def modify_cart(request):&#10;    try:&#10;        action = request.POST.get('action')&#10;        food_id = request.POST.get('food_id')&#10;        quantity = int(request.POST.get('quantity', 0))&#10;&#10;        food = get_object_or_404(Food, id=food_id)&#10;        cart, _ = Cart.objects.get_or_create(user=request.user)&#10;        cart_item, created = CartItem.objects.get_or_create(cart=cart, food=food)&#10;&#10;        if created:&#10;            cart_item.quantity = 0&#10;&#10;        if action == 'add':&#10;            cart_item.quantity += quantity&#10;        elif action == 'remove':&#10;            cart_item.quantity -= quantity&#10;            if cart_item.quantity &lt;= 0:&#10;                cart_item.delete()&#10;                return JsonResponse({'success': True, 'quantity': 0})&#10;&#10;        if cart_item.id:&#10;            cart_item.save()&#10;            return JsonResponse({'success': True, 'quantity': cart_item.quantity})&#10;        else:&#10;            return JsonResponse({'success': True, 'quantity': 0})&#10;    except Exception as e:&#10;        return JsonResponse({'success': False, 'error': str(e)})&#10;&#10;@login_required&#10;@require_POST&#10;def remove_from_cart(request):&#10;    user = request.user&#10;    food_id = request.POST.get('food_id')&#10;    if not food_id:&#10;        return JsonResponse({'error': 'Missing food_id'}, status=400)&#10;&#10;    try:&#10;        cart = get_object_or_404(Cart, user=user)&#10;        CartItem.objects.filter(cart=cart, food_id=food_id).delete()&#10;&#10;        cart_items_count = cart.items.count()&#10;&#10;        return JsonResponse({'success': True, 'cart_items_count': cart_items_count})&#10;    except Exception as e:&#10;        return JsonResponse({'error': str(e)}, status=500)&#10;&#10;@require_POST&#10;def remove_from_cart_view(request):&#10;    if request.method == 'POST':&#10;        food_id = request.POST.get('food_id')&#10;        try:&#10;            item = CartItem.objects.get(food_id=food_id, cart__user=request.user)&#10;            item.delete()&#10;            return JsonResponse({'success': True})&#10;        except CartItem.DoesNotExist:&#10;            return JsonResponse({'success': False, 'error': 'Товар не найден в корзине'})&#10;&#10;@csrf_exempt&#10;def save_order(request):&#10;    if request.method == 'POST':&#10;        data = json.loads(request.body)&#10;        from pymongo import MongoClient&#10;        client = MongoClient('mongodb://localhost:27017/')&#10;        db = client.Usuhi2&#10;        collection = db.orders&#10;        collection.insert_one(data)&#10;        return JsonResponse({'status': 'success', 'message': 'Data saved successfully'})&#10;    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)&#10;&#10;@login_required&#10;def get_cart_total(request):&#10;    cart, _ = Cart.objects.get_or_create(user=request.user)&#10;    total_price = sum(item.food.price * item.quantity for item in cart.items.all())&#10;    return JsonResponse({'success': True, 'total_price': str(total_price)})&#10;&#10;def order_create(request):&#10;    if request.method == 'POST':&#10;        form = OrderCreateForm(request.POST)&#10;        if form.is_valid():&#10;            with transaction.atomic():&#10;                order = form.save(commit=False)&#10;                order.user = request.user&#10;                order.save()&#10;                cart = Cart.objects.get(user=request.user)&#10;                cart_items = CartItem.objects.filter(cart=cart)&#10;                for item in cart_items:&#10;                    OrderItem.objects.create(order=order, food=item.food, price=item.food.price, quantity=item.quantity)&#10;                cart_items.delete()&#10;            return redirect('order_success')&#10;    else:&#10;        form = OrderCreateForm()&#10;    return render(request, 'order_create.html', {'form': form})&#10;&#10;def order_success(request):&#10;    return render(request, 'order_success.html')&#10;&#10;" />
              <option name="updatedContent" value="from django.shortcuts import render, get_object_or_404, redirect&#13;&#10;from .models import *&#13;&#10;from .forms import *&#13;&#10;from django.contrib.auth.forms import AuthenticationForm&#13;&#10;from django.contrib.auth import authenticate, login, logout, update_session_auth_hash&#13;&#10;from django.contrib.auth.decorators import login_required&#13;&#10;from django.views.decorators.http import require_POST&#13;&#10;from django.core.exceptions import ObjectDoesNotExist&#13;&#10;from django.http import JsonResponse&#13;&#10;from django.views.decorators.csrf import csrf_exempt&#13;&#10;import json&#13;&#10;from django.db import transaction&#13;&#10;from django.contrib.auth.views import PasswordChangeView&#13;&#10;from django.urls import reverse_lazy&#13;&#10;from django.shortcuts import render, get_object_or_404, redirect&#13;&#10;from django.contrib.auth.decorators import login_required&#13;&#10;from django.http import JsonResponse&#13;&#10;from .models import Food, Cart, CartItem, Profile&#13;&#10;from django.views.decorators.http import require_POST&#13;&#10;from django.views.decorators.csrf import csrf_exempt&#13;&#10;import json&#13;&#10;import logging&#13;&#10;from decimal import Decimal&#13;&#10;logger = logging.getLogger(__name__)&#13;&#10;&#13;&#10;def food_page(request):&#13;&#10;    foods = Food.objects.all()&#13;&#10;    cart_items = {}&#13;&#10;&#13;&#10;    if request.user.is_authenticated:&#13;&#10;        cart, _ = Cart.objects.get_or_create(user=request.user)&#13;&#10;        cart_items = {item.food.id: item.quantity for item in cart.items.all()}&#13;&#10;&#13;&#10;    FOOD_TYPES = Food.FOOD_TYPES&#13;&#10;    context = {&#13;&#10;        'foods': foods,&#13;&#10;        'FOOD_TYPES': FOOD_TYPES,&#13;&#10;        'cart_items': cart_items&#13;&#10;    }&#13;&#10;    return render(request, &quot;foods_page.html&quot;, context)&#13;&#10;&#13;&#10;def about_page(request):&#13;&#10;    return render(request, 'about_page.html')&#13;&#10;&#13;&#10;def signup_page(request):&#13;&#10;    if request.method == 'POST':&#13;&#10;        form = NewsUserForm(request.POST)&#13;&#10;        if form.is_valid():&#13;&#10;            form.save()&#13;&#10;            return redirect(&quot;login_page&quot;)&#13;&#10;    else:&#13;&#10;        form = NewsUserForm()&#13;&#10;    context = {'form': form}&#13;&#10;    return render(request, './signup.html', context)&#13;&#10;&#13;&#10;def login_page(request):&#13;&#10;    if request.method == 'POST':&#13;&#10;        form = AuthenticationForm(request, data=request.POST)&#13;&#10;        if form.is_valid():&#13;&#10;            username = form.cleaned_data.get('username')&#13;&#10;            password = form.cleaned_data.get('password')&#13;&#10;            user = authenticate(username=username, password=password)&#13;&#10;            if user is not None:&#13;&#10;                login(request, user)&#13;&#10;                return redirect(&quot;food_page&quot;)&#13;&#10;    else:&#13;&#10;        form = AuthenticationForm()&#13;&#10;    context = {'form': form}&#13;&#10;    return render(request, './login.html', context)&#13;&#10;&#13;&#10;@login_required&#13;&#10;def view_cart(request):&#13;&#10;    cart, _ = Cart.objects.get_or_create(user=request.user)&#13;&#10;    cart_items = {item.food.id: item.quantity for item in cart.items.all()}&#13;&#10;    total_price = sum(item.food.price * item.quantity for item in cart.items.all())&#13;&#10;&#13;&#10;    context = {&#13;&#10;        'foods': Food.objects.all(),&#13;&#10;        'cart_items': cart_items,&#13;&#10;        'total_price': total_price&#13;&#10;    }&#13;&#10;    return render(request, &quot;cart.html&quot;, context)&#13;&#10;&#13;&#10;@login_required&#13;&#10;def view_profile(request):&#13;&#10;    try:&#13;&#10;        profile = Profile.objects.get(user=request.user)&#13;&#10;    except Profile.DoesNotExist:&#13;&#10;        profile = Profile.objects.create(user=request.user)&#13;&#10;&#13;&#10;    if request.method == 'POST':&#13;&#10;        user_form = UserUpdateForm(request.POST, instance=request.user)&#13;&#10;        profile_form = ProfileForm(request.POST, request.FILES, instance=profile)&#13;&#10;&#13;&#10;        if user_form.is_valid() and profile_form.is_valid():&#13;&#10;            user_form.save()&#13;&#10;            profile_form.save()&#13;&#10;            return redirect('view_profile')&#13;&#10;    else:&#13;&#10;        user_form = UserUpdateForm(instance=request.user)&#13;&#10;        profile_form = ProfileForm(instance=profile)&#13;&#10;&#13;&#10;    context = {&#13;&#10;        'profile': profile,&#13;&#10;        'user_form': user_form,&#13;&#10;        'profile_form': profile_form,&#13;&#10;    }&#13;&#10;    return render(request, 'profile.html', context)&#13;&#10;&#13;&#10;class CustomPasswordChangeView(PasswordChangeView):&#13;&#10;    form_class = CustomPasswordChangeForm&#13;&#10;    success_url = reverse_lazy('view_profile')&#13;&#10;    template_name = 'change_password.html'&#13;&#10;&#13;&#10;    def form_valid(self, form):&#13;&#10;        user = form.save()&#13;&#10;        update_session_auth_hash(self.request, user)&#13;&#10;        return super().form_valid(form)&#13;&#10;&#13;&#10;@login_required&#13;&#10;def edit_profile(request):&#13;&#10;    profile = get_object_or_404(Profile, user=request.user)&#13;&#10;    if request.method == 'POST':&#13;&#10;        user_form = UserUpdateForm(request.POST, instance=request.user)&#13;&#10;        profile_form = ProfileForm(request.POST, request.FILES, instance=profile)&#13;&#10;        password_form = CustomPasswordChangeForm(user=request.user, data=request.POST)&#13;&#10;&#13;&#10;        if user_form.is_valid() and profile_form.is_valid():&#13;&#10;            user_form.save()&#13;&#10;            profile_form.save()&#13;&#10;            return redirect('view_profile')&#13;&#10;&#13;&#10;        if password_form.is_valid():&#13;&#10;            user = password_form.save()&#13;&#10;            update_session_auth_hash(request, user)&#13;&#10;            return redirect('view_profile')&#13;&#10;    else:&#13;&#10;        user_form = UserUpdateForm(instance=request.user)&#13;&#10;        profile_form = ProfileForm(instance=profile)&#13;&#10;        password_form = CustomPasswordChangeForm(user=request.user)&#13;&#10;&#13;&#10;    context = {&#13;&#10;        'user_form': user_form,&#13;&#10;        'profile_form': profile_form,&#13;&#10;        'password_form': password_form,&#13;&#10;    }&#13;&#10;    return render(request, 'edit_profile.html', context)&#13;&#10;&#13;&#10;def logout_request(request):&#13;&#10;    logout(request)&#13;&#10;    return redirect(&quot;food_page&quot;)&#13;&#10;&#13;&#10;def add_food_page(request):&#13;&#10;    if request.method == 'POST':&#13;&#10;        form = AddFoodForm(request.POST)&#13;&#10;        if form.is_valid():&#13;&#10;            form.save()&#13;&#10;            return redirect('all_food_page')&#13;&#10;    else:&#13;&#10;        form = AddFoodForm()&#13;&#10;    context = {'form': form}&#13;&#10;    return render(request, './add_food_page.html', context)&#13;&#10;&#13;&#10;def food_detail_page(request, pk):&#13;&#10;    food = get_object_or_404(Food, pk=pk)&#13;&#10;    context = {&#13;&#10;        'food': food,&#13;&#10;    }&#13;&#10;    return render(request, './food_detail_page.html', context)&#13;&#10;&#13;&#10;def edit_food_page(request, pk):&#13;&#10;    food = get_object_or_404(Food, pk=pk)&#13;&#10;    form = AddFoodForm(request.POST or None, request.FILES or None, instance=food)&#13;&#10;    if request.method == 'POST':&#13;&#10;        if form.is_valid():&#13;&#10;            form.save()&#13;&#10;            return redirect('food_detail_page', pk=food.pk)&#13;&#10;    context = {&#13;&#10;        'food': food,&#13;&#10;        'form': form&#13;&#10;    }&#13;&#10;    return render(request, './edit_food_page.html', context)&#13;&#10;&#13;&#10;def delete_food_page(request, pk):&#13;&#10;    food = get_object_or_404(Food, pk=pk)&#13;&#10;    if request.method == 'POST':&#13;&#10;        food.delete()&#13;&#10;        return redirect('all_food_page')&#13;&#10;    context = {&#13;&#10;        'food': food&#13;&#10;    }&#13;&#10;    return render(request, './delete_food_page.html', context)&#13;&#10;&#13;&#10;def all_food_page(request):&#13;&#10;    foods = Food.objects.all()&#13;&#10;    FOOD_TYPES = Food.FOOD_TYPES&#13;&#10;    context = {'foods': foods, 'FOOD_TYPES': FOOD_TYPES}&#13;&#10;    return render(request, 'all_foods.html', context)&#13;&#10;&#13;&#10;@login_required&#13;&#10;@require_POST&#13;&#10;def modify_cart(request):&#13;&#10;    try:&#13;&#10;        action = request.POST.get('action')&#13;&#10;        food_id = request.POST.get('food_id')&#13;&#10;        quantity = int(request.POST.get('quantity', 0))&#13;&#10;&#13;&#10;        food = get_object_or_404(Food, id=food_id)&#13;&#10;        cart, _ = Cart.objects.get_or_create(user=request.user)&#13;&#10;        cart_item, created = CartItem.objects.get_or_create(cart=cart, food=food, defaults={'quantity': 1})&#13;&#10;&#13;&#10;        if not created:&#13;&#10;            if action == 'add':&#13;&#10;                cart_item.quantity += quantity&#13;&#10;            elif action == 'remove':&#13;&#10;                cart_item.quantity -= quantity&#13;&#10;                if cart_item.quantity &lt;= 0:&#13;&#10;                    cart_item.delete()&#13;&#10;                    return JsonResponse({'success': True, 'quantity': 0})&#13;&#10;            cart_item.save()&#13;&#10;            return JsonResponse({'success': True, 'quantity': cart_item.quantity})&#13;&#10;        else:&#13;&#10;            # Если только что создан, quantity уже 1&#13;&#10;            return JsonResponse({'success': True, 'quantity': cart_item.quantity})&#13;&#10;    except Exception as e:&#13;&#10;        return JsonResponse({'success': False, 'error': str(e)})&#13;&#10;&#13;&#10;@login_required&#13;&#10;@require_POST&#13;&#10;def remove_from_cart(request):&#13;&#10;    user = request.user&#13;&#10;    food_id = request.POST.get('food_id')&#13;&#10;    if not food_id:&#13;&#10;        return JsonResponse({'error': 'Missing food_id'}, status=400)&#13;&#10;&#13;&#10;    try:&#13;&#10;        cart = get_object_or_404(Cart, user=user)&#13;&#10;        CartItem.objects.filter(cart=cart, food_id=food_id).delete()&#13;&#10;&#13;&#10;        cart_items_count = cart.items.count()&#13;&#10;&#13;&#10;        return JsonResponse({'success': True, 'cart_items_count': cart_items_count})&#13;&#10;    except Exception as e:&#13;&#10;        return JsonResponse({'error': str(e)}, status=500)&#13;&#10;&#13;&#10;@require_POST&#13;&#10;def remove_from_cart_view(request):&#13;&#10;    if request.method == 'POST':&#13;&#10;        food_id = request.POST.get('food_id')&#13;&#10;        try:&#13;&#10;            item = CartItem.objects.get(food_id=food_id, cart__user=request.user)&#13;&#10;            item.delete()&#13;&#10;            return JsonResponse({'success': True})&#13;&#10;        except CartItem.DoesNotExist:&#13;&#10;            return JsonResponse({'success': False, 'error': 'Товар не найден в корзине'})&#13;&#10;&#13;&#10;@csrf_exempt&#13;&#10;def save_order(request):&#13;&#10;    if request.method == 'POST':&#13;&#10;        data = json.loads(request.body)&#13;&#10;        from pymongo import MongoClient&#13;&#10;        client = MongoClient('mongodb://localhost:27017/')&#13;&#10;        db = client.Usuhi2&#13;&#10;        collection = db.orders&#13;&#10;        collection.insert_one(data)&#13;&#10;        return JsonResponse({'status': 'success', 'message': 'Data saved successfully'})&#13;&#10;    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)&#13;&#10;&#13;&#10;@login_required&#13;&#10;def get_cart_total(request):&#13;&#10;    cart, _ = Cart.objects.get_or_create(user=request.user)&#13;&#10;    total_price = sum(item.food.price * item.quantity for item in cart.items.all())&#13;&#10;    return JsonResponse({'success': True, 'total_price': str(total_price)})&#13;&#10;&#13;&#10;def order_create(request):&#13;&#10;    if request.method == 'POST':&#13;&#10;        form = OrderCreateForm(request.POST)&#13;&#10;        if form.is_valid():&#13;&#10;            with transaction.atomic():&#13;&#10;                order = form.save(commit=False)&#13;&#10;                order.user = request.user&#13;&#10;                order.save()&#13;&#10;                cart = Cart.objects.get(user=request.user)&#13;&#10;                cart_items = CartItem.objects.filter(cart=cart)&#13;&#10;                for item in cart_items:&#13;&#10;                    OrderItem.objects.create(order=order, food=item.food, price=item.food.price, quantity=item.quantity)&#13;&#10;                cart_items.delete()&#13;&#10;            return redirect('order_success')&#13;&#10;    else:&#13;&#10;        form = OrderCreateForm()&#13;&#10;    return render(request, 'order_create.html', {'form': form})&#13;&#10;&#13;&#10;def order_success(request):&#13;&#10;    return render(request, 'order_success.html')" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../requirements.txt" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>